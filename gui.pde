/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void slider1_change1(GSlider source, GEvent event) { //_CODE_:slider1:715785:
  letters = source.getValueI();
  //println("slider1 - GSlider >> GEvent." + event + " @ " + millis());  
} //_CODE_:slider1:715785:

public void textfield1_change1(GTextField source, GEvent event) { //_CODE_:textfield1:869104:
  //println("textfield1 - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:textfield1:869104:

public void button1_click1(GButton source, GEvent event) { //_CODE_:button1:782325:
  if (event.toString().equals("CLICKED")) {
    textfield1.setText(generate(letters));
  }
  //println("button1 - GButton >> GEvent." + event + " @ " + millis());
} //_CODE_:button1:782325:

public void checkbox1_clicked1(GCheckbox source, GEvent event) { //_CODE_:checkbox1:698465:
  if (event.toString().equals("DESELECTED") && !(checkbox2.isSelected()) && !(checkbox3.isSelected()) && !(checkbox4.isSelected())) checkbox1.setSelected(true);
  //println("checkbox1 - GCheckbox >> GEvent." + event + " @ " + millis());
} //_CODE_:checkbox1:698465:

public void checkbox2_clicked1(GCheckbox source, GEvent event) { //_CODE_:checkbox2:563426:
  if (event.toString().equals("DESELECTED") && !(checkbox1.isSelected()) && !(checkbox3.isSelected()) && !(checkbox4.isSelected())) checkbox2.setSelected(true);
  //println("checkbox2 - GCheckbox >> GEvent." + event + " @ " + millis());
} //_CODE_:checkbox2:563426:

public void checkbox3_clicked1(GCheckbox source, GEvent event) { //_CODE_:checkbox3:602290:
  if (event.toString().equals("DESELECTED") && !(checkbox1.isSelected()) && !(checkbox2.isSelected()) && !(checkbox4.isSelected())) checkbox3.setSelected(true);
  //println("checkbox3 - GCheckbox >> GEvent." + event + " @ " + millis());
} //_CODE_:checkbox3:602290:

public void checkbox4_clicked1(GCheckbox source, GEvent event) { //_CODE_:checkbox4:614109:
  if (event.toString().equals("DESELECTED") && !(checkbox1.isSelected()) && !(checkbox2.isSelected()) && !(checkbox3.isSelected())) checkbox4.setSelected(true);
  //println("checkbox4 - GCheckbox >> GEvent." + event + " @ " + millis());
} //_CODE_:checkbox4:614109:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Password generator");
  label1 = new GLabel(this, 80, 10, 340, 30);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("PASSWORD GENERATOR");
  label1.setOpaque(false);
  slider1 = new GSlider(this, 80, 70, 340, 60, 15.0);
  slider1.setShowValue(true);
  slider1.setShowLimits(true);
  slider1.setLimits(8, 6, 16);
  slider1.setNbrTicks(10);
  slider1.setStickToTicks(true);
  slider1.setShowTicks(true);
  slider1.setNumberFormat(G4P.INTEGER, 0);
  slider1.setOpaque(true);
  slider1.addEventHandler(this, "slider1_change1");
  textfield1 = new GTextField(this, 126, 244, 230, 40, G4P.SCROLLBARS_NONE);
  textfield1.setOpaque(true);
  textfield1.addEventHandler(this, "textfield1_change1");
  button1 = new GButton(this, 190, 199, 100, 30);
  button1.setText("GENERATE");
  button1.addEventHandler(this, "button1_click1");
  checkbox1 = new GCheckbox(this, 100, 150, 50, 20);
  checkbox1.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  checkbox1.setText("a-z");
  checkbox1.setOpaque(false);
  checkbox1.addEventHandler(this, "checkbox1_clicked1");
  checkbox1.setSelected(true);
  checkbox2 = new GCheckbox(this, 170, 150, 60, 20);
  checkbox2.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  checkbox2.setText("A-Z");
  checkbox2.setOpaque(false);
  checkbox2.addEventHandler(this, "checkbox2_clicked1");
  checkbox2.setSelected(true);
  checkbox3 = new GCheckbox(this, 250, 150, 50, 20);
  checkbox3.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  checkbox3.setText("0-9");
  checkbox3.setOpaque(false);
  checkbox3.addEventHandler(this, "checkbox3_clicked1");
  checkbox3.setSelected(true);
  checkbox4 = new GCheckbox(this, 320, 150, 80, 20);
  checkbox4.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  checkbox4.setText("!@#$...");
  checkbox4.setOpaque(false);
  checkbox4.addEventHandler(this, "checkbox4_clicked1");
  label2 = new GLabel(this, 160, 50, 190, 20);
  label2.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label2.setText("Password length");
  label2.setOpaque(false);
}

// Variable declarations 
// autogenerated do not edit
GLabel label1; 
GSlider slider1; 
GTextField textfield1; 
GButton button1; 
GCheckbox checkbox1; 
GCheckbox checkbox2; 
GCheckbox checkbox3; 
GCheckbox checkbox4; 
GLabel label2; 
